/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LangRouteImport } from './routes/$lang'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangIndexRouteImport } from './routes/$lang/index'
import { Route as LangStudioRouteImport } from './routes/$lang/studio'
import { Route as LangMigrationRouteImport } from './routes/$lang/migration'
import { Route as LangHarmonizationRouteImport } from './routes/$lang/harmonization'
import { Route as LangConverterRouteImport } from './routes/$lang/converter'
import { Route as LangStudioIndexRouteImport } from './routes/$lang/studio/index'
import { Route as LangStudioEditorRouteImport } from './routes/$lang/studio/editor'

const LangRoute = LangRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangIndexRoute = LangIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangRoute,
} as any)
const LangStudioRoute = LangStudioRouteImport.update({
  id: '/studio',
  path: '/studio',
  getParentRoute: () => LangRoute,
} as any)
const LangMigrationRoute = LangMigrationRouteImport.update({
  id: '/migration',
  path: '/migration',
  getParentRoute: () => LangRoute,
} as any)
const LangHarmonizationRoute = LangHarmonizationRouteImport.update({
  id: '/harmonization',
  path: '/harmonization',
  getParentRoute: () => LangRoute,
} as any)
const LangConverterRoute = LangConverterRouteImport.update({
  id: '/converter',
  path: '/converter',
  getParentRoute: () => LangRoute,
} as any)
const LangStudioIndexRoute = LangStudioIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangStudioRoute,
} as any)
const LangStudioEditorRoute = LangStudioEditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => LangStudioRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/converter': typeof LangConverterRoute
  '/$lang/harmonization': typeof LangHarmonizationRoute
  '/$lang/migration': typeof LangMigrationRoute
  '/$lang/studio': typeof LangStudioRouteWithChildren
  '/$lang/': typeof LangIndexRoute
  '/$lang/studio/editor': typeof LangStudioEditorRoute
  '/$lang/studio/': typeof LangStudioIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang/converter': typeof LangConverterRoute
  '/$lang/harmonization': typeof LangHarmonizationRoute
  '/$lang/migration': typeof LangMigrationRoute
  '/$lang': typeof LangIndexRoute
  '/$lang/studio/editor': typeof LangStudioEditorRoute
  '/$lang/studio': typeof LangStudioIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/converter': typeof LangConverterRoute
  '/$lang/harmonization': typeof LangHarmonizationRoute
  '/$lang/migration': typeof LangMigrationRoute
  '/$lang/studio': typeof LangStudioRouteWithChildren
  '/$lang/': typeof LangIndexRoute
  '/$lang/studio/editor': typeof LangStudioEditorRoute
  '/$lang/studio/': typeof LangStudioIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/converter'
    | '/$lang/harmonization'
    | '/$lang/migration'
    | '/$lang/studio'
    | '/$lang/'
    | '/$lang/studio/editor'
    | '/$lang/studio/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang/converter'
    | '/$lang/harmonization'
    | '/$lang/migration'
    | '/$lang'
    | '/$lang/studio/editor'
    | '/$lang/studio'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/converter'
    | '/$lang/harmonization'
    | '/$lang/migration'
    | '/$lang/studio'
    | '/$lang/'
    | '/$lang/studio/editor'
    | '/$lang/studio/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRoute: typeof LangRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangIndexRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/studio': {
      id: '/$lang/studio'
      path: '/studio'
      fullPath: '/$lang/studio'
      preLoaderRoute: typeof LangStudioRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/migration': {
      id: '/$lang/migration'
      path: '/migration'
      fullPath: '/$lang/migration'
      preLoaderRoute: typeof LangMigrationRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/harmonization': {
      id: '/$lang/harmonization'
      path: '/harmonization'
      fullPath: '/$lang/harmonization'
      preLoaderRoute: typeof LangHarmonizationRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/converter': {
      id: '/$lang/converter'
      path: '/converter'
      fullPath: '/$lang/converter'
      preLoaderRoute: typeof LangConverterRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/studio/': {
      id: '/$lang/studio/'
      path: '/'
      fullPath: '/$lang/studio/'
      preLoaderRoute: typeof LangStudioIndexRouteImport
      parentRoute: typeof LangStudioRoute
    }
    '/$lang/studio/editor': {
      id: '/$lang/studio/editor'
      path: '/editor'
      fullPath: '/$lang/studio/editor'
      preLoaderRoute: typeof LangStudioEditorRouteImport
      parentRoute: typeof LangStudioRoute
    }
  }
}

interface LangStudioRouteChildren {
  LangStudioEditorRoute: typeof LangStudioEditorRoute
  LangStudioIndexRoute: typeof LangStudioIndexRoute
}

const LangStudioRouteChildren: LangStudioRouteChildren = {
  LangStudioEditorRoute: LangStudioEditorRoute,
  LangStudioIndexRoute: LangStudioIndexRoute,
}

const LangStudioRouteWithChildren = LangStudioRoute._addFileChildren(
  LangStudioRouteChildren,
)

interface LangRouteChildren {
  LangConverterRoute: typeof LangConverterRoute
  LangHarmonizationRoute: typeof LangHarmonizationRoute
  LangMigrationRoute: typeof LangMigrationRoute
  LangStudioRoute: typeof LangStudioRouteWithChildren
  LangIndexRoute: typeof LangIndexRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangConverterRoute: LangConverterRoute,
  LangHarmonizationRoute: LangHarmonizationRoute,
  LangMigrationRoute: LangMigrationRoute,
  LangStudioRoute: LangStudioRouteWithChildren,
  LangIndexRoute: LangIndexRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRoute: LangRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
